{"ast":null,"code":"import React,{useState}from'react';import ChatMessage from'./components/ChatMessage';import ChatInput from'./components/ChatInput';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const App=()=>{const[messages,setMessages]=useState([{role:'assistant',content:'Hello! I\\'m your Ireland travel assistant. How can I help you today?'}]);const[isLoading,setIsLoading]=useState(false);const handleSendMessage=async content=>{try{setIsLoading(true);// Add user message to chat\nconst userMessage={role:'user',content};setMessages(prev=>[...prev,userMessage]);// Prepare the chat request\nconst chatRequest={message:content,conversation_history:messages.map(msg=>({role:msg.role,content:msg.content}))};console.log('Preparing to send request to API:',{url:'/api/chat',method:'POST',headers:{'Content-Type':'application/json','Accept':'application/json'},body:chatRequest});// Send request to API\nconst response=await fetch('/api/chat',{method:'POST',headers:{'Content-Type':'application/json','Accept':'application/json'},body:JSON.stringify(chatRequest),credentials:'same-origin'});console.log('Response received:',{status:response.status,statusText:response.statusText,headers:Object.fromEntries(response.headers.entries())});if(!response.ok){const errorText=await response.text();console.error('Error response details:',{status:response.status,statusText:response.statusText,headers:Object.fromEntries(response.headers.entries()),body:errorText});let errorMessage='Failed to get response from API';try{const errorData=JSON.parse(errorText);errorMessage=errorData.detail||errorMessage;}catch(parseError){console.error('Failed to parse error response:',parseError);errorMessage=\"\".concat(errorMessage,\": \").concat(errorText);}throw new Error(errorMessage);}const data=await response.json();console.log('Parsed response data:',data);// Add assistant's response to chat\nconst assistantMessage={role:'assistant',content:data.response};setMessages(prev=>[...prev,assistantMessage]);}catch(error){console.error('Error in handleSendMessage:',error);// Add error message to chat\nconst errorMessage={role:'assistant',content:error instanceof Error?error.message:'Sorry, I encountered an error. Please try again.'};setMessages(prev=>[...prev,errorMessage]);}finally{setIsLoading(false);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col h-screen bg-gray-100\",children:[/*#__PURE__*/_jsx(\"header\",{className:\"bg-blue-600 text-white p-4\",children:/*#__PURE__*/_jsx(\"h1\",{className:\"text-2xl font-bold\",children:\"Ireland Travel Assistant\"})}),/*#__PURE__*/_jsx(\"main\",{className:\"flex-1 overflow-y-auto p-4\",children:/*#__PURE__*/_jsx(\"div\",{className:\"max-w-3xl mx-auto space-y-4\",children:messages.map((message,index)=>/*#__PURE__*/_jsx(ChatMessage,{message:message},index))})}),/*#__PURE__*/_jsx(\"footer\",{className:\"max-w-3xl mx-auto w-full p-4\",children:/*#__PURE__*/_jsx(ChatInput,{onSendMessage:handleSendMessage,isLoading:isLoading})})]});};export default App;","map":{"version":3,"names":["React","useState","ChatMessage","ChatInput","jsx","_jsx","jsxs","_jsxs","App","messages","setMessages","role","content","isLoading","setIsLoading","handleSendMessage","userMessage","prev","chatRequest","message","conversation_history","map","msg","console","log","url","method","headers","body","response","fetch","JSON","stringify","credentials","status","statusText","Object","fromEntries","entries","ok","errorText","text","error","errorMessage","errorData","parse","detail","parseError","concat","Error","data","json","assistantMessage","className","children","index","onSendMessage"],"sources":["C:/Users/madhu/Travel_RAG_Final/client/src/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport ChatMessage from './components/ChatMessage';\r\nimport ChatInput from './components/ChatInput';\r\nimport { ChatMessage as ChatMessageType, ChatRequest, ChatResponse } from './types';\r\n\r\nconst App: React.FC = () => {\r\n    const [messages, setMessages] = useState<ChatMessageType[]>([\r\n        {\r\n            role: 'assistant',\r\n            content: 'Hello! I\\'m your Ireland travel assistant. How can I help you today?'\r\n        }\r\n    ]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const handleSendMessage = async (content: string) => {\r\n        try {\r\n            setIsLoading(true);\r\n            \r\n            // Add user message to chat\r\n            const userMessage: ChatMessageType = { role: 'user', content };\r\n            setMessages(prev => [...prev, userMessage]);\r\n\r\n            // Prepare the chat request\r\n            const chatRequest: ChatRequest = {\r\n                message: content,\r\n                conversation_history: messages.map(msg => ({\r\n                    role: msg.role,\r\n                    content: msg.content\r\n                }))\r\n            };\r\n\r\n            console.log('Preparing to send request to API:', {\r\n                url: '/api/chat',\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json'\r\n                },\r\n                body: chatRequest\r\n            });\r\n\r\n            // Send request to API\r\n            const response = await fetch('/api/chat', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json'\r\n                },\r\n                body: JSON.stringify(chatRequest),\r\n                credentials: 'same-origin'\r\n            });\r\n\r\n            console.log('Response received:', {\r\n                status: response.status,\r\n                statusText: response.statusText,\r\n                headers: Object.fromEntries(response.headers.entries())\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorText = await response.text();\r\n                console.error('Error response details:', {\r\n                    status: response.status,\r\n                    statusText: response.statusText,\r\n                    headers: Object.fromEntries(response.headers.entries()),\r\n                    body: errorText\r\n                });\r\n                \r\n                let errorMessage = 'Failed to get response from API';\r\n                try {\r\n                    const errorData = JSON.parse(errorText);\r\n                    errorMessage = errorData.detail || errorMessage;\r\n                } catch (parseError) {\r\n                    console.error('Failed to parse error response:', parseError);\r\n                    errorMessage = `${errorMessage}: ${errorText}`;\r\n                }\r\n                throw new Error(errorMessage);\r\n            }\r\n\r\n            const data: ChatResponse = await response.json();\r\n            console.log('Parsed response data:', data);\r\n            \r\n            // Add assistant's response to chat\r\n            const assistantMessage: ChatMessageType = {\r\n                role: 'assistant',\r\n                content: data.response\r\n            };\r\n            setMessages(prev => [...prev, assistantMessage]);\r\n\r\n        } catch (error) {\r\n            console.error('Error in handleSendMessage:', error);\r\n            // Add error message to chat\r\n            const errorMessage: ChatMessageType = {\r\n                role: 'assistant',\r\n                content: error instanceof Error ? error.message : 'Sorry, I encountered an error. Please try again.'\r\n            };\r\n            setMessages(prev => [...prev, errorMessage]);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"flex flex-col h-screen bg-gray-100\">\r\n            <header className=\"bg-blue-600 text-white p-4\">\r\n                <h1 className=\"text-2xl font-bold\">Ireland Travel Assistant</h1>\r\n            </header>\r\n            \r\n            <main className=\"flex-1 overflow-y-auto p-4\">\r\n                <div className=\"max-w-3xl mx-auto space-y-4\">\r\n                    {messages.map((message, index) => (\r\n                        <ChatMessage key={index} message={message} />\r\n                    ))}\r\n                </div>\r\n            </main>\r\n\r\n            <footer className=\"max-w-3xl mx-auto w-full p-4\">\r\n                <ChatInput \r\n                    onSendMessage={handleSendMessage}\r\n                    isLoading={isLoading}\r\n                />\r\n            </footer>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}